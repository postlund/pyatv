import re
import sys
from collections import namedtuple


def _match(line):
    regexs = [
        r"^([0-9-]+ [0-9:]+) ([A-Z]+): ([\s\S]*)",
        r"^([0-9-]+ [0-9:]+) ([A-Z]+) \(.*\) \[.*\] ([\s\S]*)",
    ]
    for regex in regexs:
        matches = re.match(regex, line)
        if matches:
            return matches
    return None


messages = []
entry = None
with open(sys.argv[1], "r") as fh:
    for line in fh:
        matches = _match(line)
        if matches:
            if entry:
                messages.append(entry)

            entry = list(matches.groups())
        elif entry:
            entry[2] += line

    if entry:
        messages.append(entry)

# print(messages)
for m in messages:
    if "Protobuf:" not in m[2]:
        continue

    if "setStateMessage" in m[2]:
        if "com.firecore.infuse" not in m[2]:
            continue

    print(m[0], m[2])

from napkin import sd
from napkin.gen_plantuml import _generate_script


class SeqDiagram:
    def __init__(self, messages):
        self.messages = messages

    def render(self):
        context = sd.parse(self.hello_world)
        return _generate_script(context)

    def hello_world(self, c):
        lib = c.object("pyatv")
        dev = c.object("ATV")

        for msg in messages:
            if msg[2].startswith(">>"):
                with lib:
                    dev.send("\\n".join(msg[2].splitlines()))
            elif msg[2].startswith("<<"):
                with dev:
                    lib.send("\\n".join(msg[2].splitlines()))
            else:
                print("note:", msg[2].rstrip())
                with lib:
                    lib.note(msg[2].rstrip())


# print(SeqDiagram(messages).render())
