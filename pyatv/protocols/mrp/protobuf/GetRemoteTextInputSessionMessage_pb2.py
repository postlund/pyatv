# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: pyatv/protocols/mrp/protobuf/GetRemoteTextInputSessionMessage.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from pyatv.protocols.mrp.protobuf import ProtocolMessage_pb2 as pyatv_dot_protocols_dot_mrp_dot_protobuf_dot_ProtocolMessage__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\nCpyatv/protocols/mrp/protobuf/GetRemoteTextInputSessionMessage.proto\x1a\x32pyatv/protocols/mrp/protobuf/ProtocolMessage.proto\"\"\n GetRemoteTextInputSessionMessage:]\n getRemoteTextInputSessionMessage\x12\x10.ProtocolMessage\x18H \x01(\x0b\x32!.GetRemoteTextInputSessionMessage')


GETREMOTETEXTINPUTSESSIONMESSAGE_FIELD_NUMBER = 72
getRemoteTextInputSessionMessage = DESCRIPTOR.extensions_by_name['getRemoteTextInputSessionMessage']

_GETREMOTETEXTINPUTSESSIONMESSAGE = DESCRIPTOR.message_types_by_name['GetRemoteTextInputSessionMessage']
GetRemoteTextInputSessionMessage = _reflection.GeneratedProtocolMessageType('GetRemoteTextInputSessionMessage', (_message.Message,), {
  'DESCRIPTOR' : _GETREMOTETEXTINPUTSESSIONMESSAGE,
  '__module__' : 'pyatv.protocols.mrp.protobuf.GetRemoteTextInputSessionMessage_pb2'
  # @@protoc_insertion_point(class_scope:GetRemoteTextInputSessionMessage)
  })
_sym_db.RegisterMessage(GetRemoteTextInputSessionMessage)

if _descriptor._USE_C_DESCRIPTORS == False:
  pyatv_dot_protocols_dot_mrp_dot_protobuf_dot_ProtocolMessage__pb2.ProtocolMessage.RegisterExtension(getRemoteTextInputSessionMessage)

  DESCRIPTOR._options = None
  _GETREMOTETEXTINPUTSESSIONMESSAGE._serialized_start=123
  _GETREMOTETEXTINPUTSESSIONMESSAGE._serialized_end=157
# @@protoc_insertion_point(module_scope)
