# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    List as typing___List,
    Optional as typing___Optional,
    Text as typing___Text,
    Tuple as typing___Tuple,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


class NowPlayingInfo(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class RepeatMode(int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: int) -> str: ...
        @classmethod
        def Value(cls, name: str) -> NowPlayingInfo.RepeatMode: ...
        @classmethod
        def keys(cls) -> typing___List[str]: ...
        @classmethod
        def values(cls) -> typing___List[NowPlayingInfo.RepeatMode]: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[str, NowPlayingInfo.RepeatMode]]: ...
        Unknown = typing___cast(NowPlayingInfo.RepeatMode, 0)
        One = typing___cast(NowPlayingInfo.RepeatMode, 1)
        All = typing___cast(NowPlayingInfo.RepeatMode, 2)
    Unknown = typing___cast(NowPlayingInfo.RepeatMode, 0)
    One = typing___cast(NowPlayingInfo.RepeatMode, 1)
    All = typing___cast(NowPlayingInfo.RepeatMode, 2)

    class ShuffleMode(int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: int) -> str: ...
        @classmethod
        def Value(cls, name: str) -> NowPlayingInfo.ShuffleMode: ...
        @classmethod
        def keys(cls) -> typing___List[str]: ...
        @classmethod
        def values(cls) -> typing___List[NowPlayingInfo.ShuffleMode]: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[str, NowPlayingInfo.ShuffleMode]]: ...
        Unkown = typing___cast(NowPlayingInfo.ShuffleMode, 0)
        Off = typing___cast(NowPlayingInfo.ShuffleMode, 1)
        Albums = typing___cast(NowPlayingInfo.ShuffleMode, 2)
        Songs = typing___cast(NowPlayingInfo.ShuffleMode, 3)
    Unkown = typing___cast(NowPlayingInfo.ShuffleMode, 0)
    Off = typing___cast(NowPlayingInfo.ShuffleMode, 1)
    Albums = typing___cast(NowPlayingInfo.ShuffleMode, 2)
    Songs = typing___cast(NowPlayingInfo.ShuffleMode, 3)

    album = ... # type: typing___Text
    artist = ... # type: typing___Text
    duration = ... # type: float
    elapsedTime = ... # type: float
    playbackRate = ... # type: float
    repeatMode = ... # type: NowPlayingInfo.RepeatMode
    shuffleMode = ... # type: NowPlayingInfo.ShuffleMode
    timestamp = ... # type: float
    title = ... # type: typing___Text
    uniqueIdentifier = ... # type: int
    isExplicitTrack = ... # type: bool
    isMusicApp = ... # type: bool
    radioStationIdentifier = ... # type: int
    radioStationHash = ... # type: typing___Text
    radioStationName = ... # type: typing___Text
    artworkDataDigest = ... # type: bytes
    isAlwaysLive = ... # type: bool
    isAdvertisement = ... # type: bool

    def __init__(self,
        *,
        album : typing___Optional[typing___Text] = None,
        artist : typing___Optional[typing___Text] = None,
        duration : typing___Optional[float] = None,
        elapsedTime : typing___Optional[float] = None,
        playbackRate : typing___Optional[float] = None,
        repeatMode : typing___Optional[NowPlayingInfo.RepeatMode] = None,
        shuffleMode : typing___Optional[NowPlayingInfo.ShuffleMode] = None,
        timestamp : typing___Optional[float] = None,
        title : typing___Optional[typing___Text] = None,
        uniqueIdentifier : typing___Optional[int] = None,
        isExplicitTrack : typing___Optional[bool] = None,
        isMusicApp : typing___Optional[bool] = None,
        radioStationIdentifier : typing___Optional[int] = None,
        radioStationHash : typing___Optional[typing___Text] = None,
        radioStationName : typing___Optional[typing___Text] = None,
        artworkDataDigest : typing___Optional[bytes] = None,
        isAlwaysLive : typing___Optional[bool] = None,
        isAdvertisement : typing___Optional[bool] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> NowPlayingInfo: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"album",u"artist",u"artworkDataDigest",u"duration",u"elapsedTime",u"isAdvertisement",u"isAlwaysLive",u"isExplicitTrack",u"isMusicApp",u"playbackRate",u"radioStationHash",u"radioStationIdentifier",u"radioStationName",u"repeatMode",u"shuffleMode",u"timestamp",u"title",u"uniqueIdentifier"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"album",u"artist",u"artworkDataDigest",u"duration",u"elapsedTime",u"isAdvertisement",u"isAlwaysLive",u"isExplicitTrack",u"isMusicApp",u"playbackRate",u"radioStationHash",u"radioStationIdentifier",u"radioStationName",u"repeatMode",u"shuffleMode",u"timestamp",u"title",u"uniqueIdentifier"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"album",b"album",u"artist",b"artist",u"artworkDataDigest",b"artworkDataDigest",u"duration",b"duration",u"elapsedTime",b"elapsedTime",u"isAdvertisement",b"isAdvertisement",u"isAlwaysLive",b"isAlwaysLive",u"isExplicitTrack",b"isExplicitTrack",u"isMusicApp",b"isMusicApp",u"playbackRate",b"playbackRate",u"radioStationHash",b"radioStationHash",u"radioStationIdentifier",b"radioStationIdentifier",u"radioStationName",b"radioStationName",u"repeatMode",b"repeatMode",u"shuffleMode",b"shuffleMode",u"timestamp",b"timestamp",u"title",b"title",u"uniqueIdentifier",b"uniqueIdentifier"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"album",b"album",u"artist",b"artist",u"artworkDataDigest",b"artworkDataDigest",u"duration",b"duration",u"elapsedTime",b"elapsedTime",u"isAdvertisement",b"isAdvertisement",u"isAlwaysLive",b"isAlwaysLive",u"isExplicitTrack",b"isExplicitTrack",u"isMusicApp",b"isMusicApp",u"playbackRate",b"playbackRate",u"radioStationHash",b"radioStationHash",u"radioStationIdentifier",b"radioStationIdentifier",u"radioStationName",b"radioStationName",u"repeatMode",b"repeatMode",u"shuffleMode",b"shuffleMode",u"timestamp",b"timestamp",u"title",b"title",u"uniqueIdentifier",b"uniqueIdentifier"]) -> None: ...
