# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    List as typing___List,
    Optional as typing___Optional,
    Text as typing___Text,
    Tuple as typing___Tuple,
    Union as typing___Union,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int
builtin___str = str
if sys.version_info < (3,):
    builtin___buffer = buffer
    builtin___unicode = unicode


class ProtocolMessage(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class ErrorCode(builtin___int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: builtin___int) -> builtin___str: ...
        @classmethod
        def Value(cls, name: builtin___str) -> 'ProtocolMessage.ErrorCode': ...
        @classmethod
        def keys(cls) -> typing___List[builtin___str]: ...
        @classmethod
        def values(cls) -> typing___List['ProtocolMessage.ErrorCode']: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[builtin___str, 'ProtocolMessage.ErrorCode']]: ...
        NO_ERROR = typing___cast('ProtocolMessage.ErrorCode', 0)
        INVALID_OPERATION = typing___cast('ProtocolMessage.ErrorCode', 2)
        OPERATION_NOT_PERMITTED = typing___cast('ProtocolMessage.ErrorCode', 3)
        CLIENT_DOES_NOT_EXIST = typing___cast('ProtocolMessage.ErrorCode', 4)
        ORIGIN_DOES_NOT_EXIST = typing___cast('ProtocolMessage.ErrorCode', 5)
        UNSUPPORTED_OPERATION = typing___cast('ProtocolMessage.ErrorCode', 6)
        FAILED_TO_SET_PICKED_ROUTE = typing___cast('ProtocolMessage.ErrorCode', 7)
        FAILED_TO_REGISTER_CUSTOM_ORIGIN = typing___cast('ProtocolMessage.ErrorCode', 8)
        FAILED_TO_REMOVE_CUSTOM_ORIGIN = typing___cast('ProtocolMessage.ErrorCode', 9)
        THE_APPLICATION_ACTIVITY_DOES_NOT_EXIST = typing___cast('ProtocolMessage.ErrorCode', 10)
        THE_APP_HAS_NOT_SETUP_A_BROWSABLE_CONTENT_ENDPOINT = typing___cast('ProtocolMessage.ErrorCode', 11)
        THE_REQUESTED_BROWSABLE_CONTENT_API_IS_NOT_SUPPORTED_BY_THE_APPLICATION = typing___cast('ProtocolMessage.ErrorCode', 12)
        THE_NOTFICATION_HAS_NOT_BEEN_WHITELISTED_BY_THE_SERVER = typing___cast('ProtocolMessage.ErrorCode', 13)
        OPERATION_REQUIRES_A_CLIENT_CALLBACK_TO_HAVE_BEEN_REGISTERED = typing___cast('ProtocolMessage.ErrorCode', 14)
        OPERATION_REQUIRES_A_CLIENT_DATA_SOURCE_TO_HAVE_BEEN_REGISTERED = typing___cast('ProtocolMessage.ErrorCode', 15)
        REQUESTED_DATA_IS_OUT_OF_DATE_AND_SHOULD_BE_REQUESTED_AGAIN = typing___cast('ProtocolMessage.ErrorCode', 16)
        THE_DEVICES_ENFORCED_VOLUME_LIMIT_HAS_BEEN_EXCEEDED = typing___cast('ProtocolMessage.ErrorCode', 17)
        VOLUME_VALUE_IS_OUT_OF_RANGE = typing___cast('ProtocolMessage.ErrorCode', 18)
        VOLUME_IS_ALREADY_AT_THE_MAXIMUM_VALUE = typing___cast('ProtocolMessage.ErrorCode', 19)
        VOLUME_IS_ALREADY_MUTED = typing___cast('ProtocolMessage.ErrorCode', 20)
        VOICE_INPUT_ENDPOINT_DOES_NOT_EXIST = typing___cast('ProtocolMessage.ErrorCode', 21)
        THE_VOICE_INPUT_DEVICE_IS_NOT_REGISTERED_OR_DOES_NOT_EXIST = typing___cast('ProtocolMessage.ErrorCode', 22)
        ENCRYPTION_FAILURE = typing___cast('ProtocolMessage.ErrorCode', 23)
        ENDPOINT_DOES_NOT_EXIST = typing___cast('ProtocolMessage.ErrorCode', 24)
        THE_CLIENTS_APPLICATION_CANCELLED_THE_OPERATION = typing___cast('ProtocolMessage.ErrorCode', 25)
        THE_OPERATION_TIMED_OUT = typing___cast('ProtocolMessage.ErrorCode', 26)
        THE_SPECIFIED_PLAYER_PATH_OBJECT_WAS_INVALID = typing___cast('ProtocolMessage.ErrorCode', 27)
        ADDING_OR_REMOVING_DEVICES_FROM_THE_AV_OUTPUT_CONTEXT_HAS_FAILED = typing___cast('ProtocolMessage.ErrorCode', 28)
        COULD_NOT_FIND_THE_SPECIFIED_NOW_PLAYING_PLAYER = typing___cast('ProtocolMessage.ErrorCode', 29)
        THE_SPECIFIED_CONTENT_ITEM_DOES_NOT_EXIST = typing___cast('ProtocolMessage.ErrorCode', 30)
        THE_SPECIFIED_OFFSET_IS_INVALID = typing___cast('ProtocolMessage.ErrorCode', 31)
        THE_SPECIFIED_OUTPUT_CONTEXT_IS_INVALID = typing___cast('ProtocolMessage.ErrorCode', 32)
        ONE_OR_MORE_SPECIFIED_OUTPUT_DEVICES_ARE_NOT_GROUPABLE = typing___cast('ProtocolMessage.ErrorCode', 33)
        THE_SPECIFIED_OUTPUT_CONTEXT_DOES_NOT_SUPPORT_ADDING_MORE_THAN_ONE_OUTPUT_DEVICE = typing___cast('ProtocolMessage.ErrorCode', 34)
        COULD_NOT_FIND_THE_SPECIFIED_NOW_PLAYING_CLIENT = typing___cast('ProtocolMessage.ErrorCode', 35)
        ENDPOINT_VOLUME_CONTROL_IS_ONLY_POSSIBLE_IF_THE_ENDPOINT_IS_PICKED_OR_REMOTE_CONTROLLABLE = typing___cast('ProtocolMessage.ErrorCode', 36)
        OUTPUT_DEVICE_VOLUME_CONTROL_IS_ONLY_POSSIBLE_IF_THE_ENDPOINT_IS_PICKED_OR_REMOTE_CONTROLLABLE = typing___cast('ProtocolMessage.ErrorCode', 37)
        CODER_MUST_SUPPORT_KEY_VALUE_CODING = typing___cast('ProtocolMessage.ErrorCode', 38)
        COULD_NOT_FIND_THE_GIVEN_OUTPUTDEVICE = typing___cast('ProtocolMessage.ErrorCode', 39)
        FAILED_TO_CONNECT_TO_REMOTE_DEVICE = typing___cast('ProtocolMessage.ErrorCode', 100)
        AUTHENTICATION_TOKEN_IS_INVALID = typing___cast('ProtocolMessage.ErrorCode', 101)
        RECORDING_SESSION_IS_ALREADY_IN_PROGRESS_ON_THIS_DEVICE = typing___cast('ProtocolMessage.ErrorCode', 102)
        THE_DEVICE_IS_NOT_CURRENTLY_RECORDING = typing___cast('ProtocolMessage.ErrorCode', 103)
        THE_CLIENT_HAS_DISCONNECTED = typing___cast('ProtocolMessage.ErrorCode', 104)
        THE_SERVER_HAS_DISCONNECTED = typing___cast('ProtocolMessage.ErrorCode', 105)
        THE_CONNECTION_HAS_BEEN_CANCELLED_BY_THE_CLIENT = typing___cast('ProtocolMessage.ErrorCode', 106)
        PAIRING_FUNCTIONALITY_IS_LOCKED_DUE_TO_SECURITY_REASONS = typing___cast('ProtocolMessage.ErrorCode', 107)
        THE_CLIENTS_OPERATING_SYSTEM_VERSION_IS_TOO_OLD = typing___cast('ProtocolMessage.ErrorCode', 108)
        THE_CLIENTS_APPLICATION_VERSION_IS_TOO_OLD = typing___cast('ProtocolMessage.ErrorCode', 109)
        THE_DEVICE_IS_NOT_PAIRED = typing___cast('ProtocolMessage.ErrorCode', 110)
        THE_PIN_PAIRING_DIALOG_WAS_REMOVED_BY_THE_USER_BEFORE_PAIRING_OCCOURED = typing___cast('ProtocolMessage.ErrorCode', 111)
        THE_PIN_PAIRING_DIALOG_WAS_REMOVED_BY_A_TIMEOUT_BEFORE_PAIRING_OCCOURED = typing___cast('ProtocolMessage.ErrorCode', 112)
        THE_CONNECTION_TIMEDOUT = typing___cast('ProtocolMessage.ErrorCode', 113)
        PAIRING_WITH_THIS_DEVICE_IS_BLOCKED = typing___cast('ProtocolMessage.ErrorCode', 114)
        THE_DEVICE_IS_GOING_TO_SLEEP = typing___cast('ProtocolMessage.ErrorCode', 115)
        CONNECTION_BLOCKED_BY_SERVER = typing___cast('ProtocolMessage.ErrorCode', 116)
        MRAVENDPOINT_WAS_DEALLOCATED_WHILE_WAITING_FOR_DEVICE_TO_CONNECT = typing___cast('ProtocolMessage.ErrorCode', 117)
        OUTPUT_CONTEXT_MODIFICATION_CAUSED_A_DEVICE_TO_NO_LONGER_BE_A_PROXY_GROUP_PLAYER = typing___cast('ProtocolMessage.ErrorCode', 200)
        OUTPUT_CONTEXT_MODIFICATION_CAUSED_A_DEVICE_TO_BECOME_A_PROXY_GROUP_PLAYER = typing___cast('ProtocolMessage.ErrorCode', 201)
        OUTPUT_CONTEXT_MODIFICATION_REQUESTED_NO_TOPOLOGY_CHANGE = typing___cast('ProtocolMessage.ErrorCode', 202)
        UNKNOWN_ERROR = typing___cast('ProtocolMessage.ErrorCode', 299)
    NO_ERROR = typing___cast('ProtocolMessage.ErrorCode', 0)
    INVALID_OPERATION = typing___cast('ProtocolMessage.ErrorCode', 2)
    OPERATION_NOT_PERMITTED = typing___cast('ProtocolMessage.ErrorCode', 3)
    CLIENT_DOES_NOT_EXIST = typing___cast('ProtocolMessage.ErrorCode', 4)
    ORIGIN_DOES_NOT_EXIST = typing___cast('ProtocolMessage.ErrorCode', 5)
    UNSUPPORTED_OPERATION = typing___cast('ProtocolMessage.ErrorCode', 6)
    FAILED_TO_SET_PICKED_ROUTE = typing___cast('ProtocolMessage.ErrorCode', 7)
    FAILED_TO_REGISTER_CUSTOM_ORIGIN = typing___cast('ProtocolMessage.ErrorCode', 8)
    FAILED_TO_REMOVE_CUSTOM_ORIGIN = typing___cast('ProtocolMessage.ErrorCode', 9)
    THE_APPLICATION_ACTIVITY_DOES_NOT_EXIST = typing___cast('ProtocolMessage.ErrorCode', 10)
    THE_APP_HAS_NOT_SETUP_A_BROWSABLE_CONTENT_ENDPOINT = typing___cast('ProtocolMessage.ErrorCode', 11)
    THE_REQUESTED_BROWSABLE_CONTENT_API_IS_NOT_SUPPORTED_BY_THE_APPLICATION = typing___cast('ProtocolMessage.ErrorCode', 12)
    THE_NOTFICATION_HAS_NOT_BEEN_WHITELISTED_BY_THE_SERVER = typing___cast('ProtocolMessage.ErrorCode', 13)
    OPERATION_REQUIRES_A_CLIENT_CALLBACK_TO_HAVE_BEEN_REGISTERED = typing___cast('ProtocolMessage.ErrorCode', 14)
    OPERATION_REQUIRES_A_CLIENT_DATA_SOURCE_TO_HAVE_BEEN_REGISTERED = typing___cast('ProtocolMessage.ErrorCode', 15)
    REQUESTED_DATA_IS_OUT_OF_DATE_AND_SHOULD_BE_REQUESTED_AGAIN = typing___cast('ProtocolMessage.ErrorCode', 16)
    THE_DEVICES_ENFORCED_VOLUME_LIMIT_HAS_BEEN_EXCEEDED = typing___cast('ProtocolMessage.ErrorCode', 17)
    VOLUME_VALUE_IS_OUT_OF_RANGE = typing___cast('ProtocolMessage.ErrorCode', 18)
    VOLUME_IS_ALREADY_AT_THE_MAXIMUM_VALUE = typing___cast('ProtocolMessage.ErrorCode', 19)
    VOLUME_IS_ALREADY_MUTED = typing___cast('ProtocolMessage.ErrorCode', 20)
    VOICE_INPUT_ENDPOINT_DOES_NOT_EXIST = typing___cast('ProtocolMessage.ErrorCode', 21)
    THE_VOICE_INPUT_DEVICE_IS_NOT_REGISTERED_OR_DOES_NOT_EXIST = typing___cast('ProtocolMessage.ErrorCode', 22)
    ENCRYPTION_FAILURE = typing___cast('ProtocolMessage.ErrorCode', 23)
    ENDPOINT_DOES_NOT_EXIST = typing___cast('ProtocolMessage.ErrorCode', 24)
    THE_CLIENTS_APPLICATION_CANCELLED_THE_OPERATION = typing___cast('ProtocolMessage.ErrorCode', 25)
    THE_OPERATION_TIMED_OUT = typing___cast('ProtocolMessage.ErrorCode', 26)
    THE_SPECIFIED_PLAYER_PATH_OBJECT_WAS_INVALID = typing___cast('ProtocolMessage.ErrorCode', 27)
    ADDING_OR_REMOVING_DEVICES_FROM_THE_AV_OUTPUT_CONTEXT_HAS_FAILED = typing___cast('ProtocolMessage.ErrorCode', 28)
    COULD_NOT_FIND_THE_SPECIFIED_NOW_PLAYING_PLAYER = typing___cast('ProtocolMessage.ErrorCode', 29)
    THE_SPECIFIED_CONTENT_ITEM_DOES_NOT_EXIST = typing___cast('ProtocolMessage.ErrorCode', 30)
    THE_SPECIFIED_OFFSET_IS_INVALID = typing___cast('ProtocolMessage.ErrorCode', 31)
    THE_SPECIFIED_OUTPUT_CONTEXT_IS_INVALID = typing___cast('ProtocolMessage.ErrorCode', 32)
    ONE_OR_MORE_SPECIFIED_OUTPUT_DEVICES_ARE_NOT_GROUPABLE = typing___cast('ProtocolMessage.ErrorCode', 33)
    THE_SPECIFIED_OUTPUT_CONTEXT_DOES_NOT_SUPPORT_ADDING_MORE_THAN_ONE_OUTPUT_DEVICE = typing___cast('ProtocolMessage.ErrorCode', 34)
    COULD_NOT_FIND_THE_SPECIFIED_NOW_PLAYING_CLIENT = typing___cast('ProtocolMessage.ErrorCode', 35)
    ENDPOINT_VOLUME_CONTROL_IS_ONLY_POSSIBLE_IF_THE_ENDPOINT_IS_PICKED_OR_REMOTE_CONTROLLABLE = typing___cast('ProtocolMessage.ErrorCode', 36)
    OUTPUT_DEVICE_VOLUME_CONTROL_IS_ONLY_POSSIBLE_IF_THE_ENDPOINT_IS_PICKED_OR_REMOTE_CONTROLLABLE = typing___cast('ProtocolMessage.ErrorCode', 37)
    CODER_MUST_SUPPORT_KEY_VALUE_CODING = typing___cast('ProtocolMessage.ErrorCode', 38)
    COULD_NOT_FIND_THE_GIVEN_OUTPUTDEVICE = typing___cast('ProtocolMessage.ErrorCode', 39)
    FAILED_TO_CONNECT_TO_REMOTE_DEVICE = typing___cast('ProtocolMessage.ErrorCode', 100)
    AUTHENTICATION_TOKEN_IS_INVALID = typing___cast('ProtocolMessage.ErrorCode', 101)
    RECORDING_SESSION_IS_ALREADY_IN_PROGRESS_ON_THIS_DEVICE = typing___cast('ProtocolMessage.ErrorCode', 102)
    THE_DEVICE_IS_NOT_CURRENTLY_RECORDING = typing___cast('ProtocolMessage.ErrorCode', 103)
    THE_CLIENT_HAS_DISCONNECTED = typing___cast('ProtocolMessage.ErrorCode', 104)
    THE_SERVER_HAS_DISCONNECTED = typing___cast('ProtocolMessage.ErrorCode', 105)
    THE_CONNECTION_HAS_BEEN_CANCELLED_BY_THE_CLIENT = typing___cast('ProtocolMessage.ErrorCode', 106)
    PAIRING_FUNCTIONALITY_IS_LOCKED_DUE_TO_SECURITY_REASONS = typing___cast('ProtocolMessage.ErrorCode', 107)
    THE_CLIENTS_OPERATING_SYSTEM_VERSION_IS_TOO_OLD = typing___cast('ProtocolMessage.ErrorCode', 108)
    THE_CLIENTS_APPLICATION_VERSION_IS_TOO_OLD = typing___cast('ProtocolMessage.ErrorCode', 109)
    THE_DEVICE_IS_NOT_PAIRED = typing___cast('ProtocolMessage.ErrorCode', 110)
    THE_PIN_PAIRING_DIALOG_WAS_REMOVED_BY_THE_USER_BEFORE_PAIRING_OCCOURED = typing___cast('ProtocolMessage.ErrorCode', 111)
    THE_PIN_PAIRING_DIALOG_WAS_REMOVED_BY_A_TIMEOUT_BEFORE_PAIRING_OCCOURED = typing___cast('ProtocolMessage.ErrorCode', 112)
    THE_CONNECTION_TIMEDOUT = typing___cast('ProtocolMessage.ErrorCode', 113)
    PAIRING_WITH_THIS_DEVICE_IS_BLOCKED = typing___cast('ProtocolMessage.ErrorCode', 114)
    THE_DEVICE_IS_GOING_TO_SLEEP = typing___cast('ProtocolMessage.ErrorCode', 115)
    CONNECTION_BLOCKED_BY_SERVER = typing___cast('ProtocolMessage.ErrorCode', 116)
    MRAVENDPOINT_WAS_DEALLOCATED_WHILE_WAITING_FOR_DEVICE_TO_CONNECT = typing___cast('ProtocolMessage.ErrorCode', 117)
    OUTPUT_CONTEXT_MODIFICATION_CAUSED_A_DEVICE_TO_NO_LONGER_BE_A_PROXY_GROUP_PLAYER = typing___cast('ProtocolMessage.ErrorCode', 200)
    OUTPUT_CONTEXT_MODIFICATION_CAUSED_A_DEVICE_TO_BECOME_A_PROXY_GROUP_PLAYER = typing___cast('ProtocolMessage.ErrorCode', 201)
    OUTPUT_CONTEXT_MODIFICATION_REQUESTED_NO_TOPOLOGY_CHANGE = typing___cast('ProtocolMessage.ErrorCode', 202)
    UNKNOWN_ERROR = typing___cast('ProtocolMessage.ErrorCode', 299)
    global___ErrorCode = ErrorCode

    class Type(builtin___int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: builtin___int) -> builtin___str: ...
        @classmethod
        def Value(cls, name: builtin___str) -> 'ProtocolMessage.Type': ...
        @classmethod
        def keys(cls) -> typing___List[builtin___str]: ...
        @classmethod
        def values(cls) -> typing___List['ProtocolMessage.Type']: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[builtin___str, 'ProtocolMessage.Type']]: ...
        UNKNOWN_MESSAGE = typing___cast('ProtocolMessage.Type', 0)
        SEND_COMMAND_MESSAGE = typing___cast('ProtocolMessage.Type', 1)
        SEND_COMMAND_RESULT_MESSAGE = typing___cast('ProtocolMessage.Type', 2)
        GET_STATE_MESSAGE = typing___cast('ProtocolMessage.Type', 3)
        SET_STATE_MESSAGE = typing___cast('ProtocolMessage.Type', 4)
        SET_ARTWORK_MESSAGE = typing___cast('ProtocolMessage.Type', 5)
        REGISTER_HID_DEVICE_MESSAGE = typing___cast('ProtocolMessage.Type', 6)
        REGISTER_HID_DEVICE_RESULT_MESSAGE = typing___cast('ProtocolMessage.Type', 7)
        SEND_HID_EVENT_MESSAGE = typing___cast('ProtocolMessage.Type', 8)
        SEND_HID_REPORT_MESSAGE = typing___cast('ProtocolMessage.Type', 9)
        SEND_VIRTUAL_TOUCH_EVENT_MESSAGE = typing___cast('ProtocolMessage.Type', 10)
        NOTIFICATION_MESSAGE = typing___cast('ProtocolMessage.Type', 11)
        CONTENT_ITEMS_CHANGED_NOTIFICATION_MESSAGE = typing___cast('ProtocolMessage.Type', 12)
        DEVICE_INFO_MESSAGE = typing___cast('ProtocolMessage.Type', 15)
        CLIENT_UPDATES_CONFIG_MESSAGE = typing___cast('ProtocolMessage.Type', 16)
        VOLUME_CONTROL_AVAILABILITY_MESSAGE = typing___cast('ProtocolMessage.Type', 17)
        GAME_CONTROLLER_MESSAGE = typing___cast('ProtocolMessage.Type', 18)
        REGISTER_GAME_CONTROLLER_MESSAGE = typing___cast('ProtocolMessage.Type', 19)
        REGISTER_GAME_CONTROLLER_RESPONSE_MESSAGE = typing___cast('ProtocolMessage.Type', 20)
        UNREGISTER_GAME_CONTROLLER_MESSAGE = typing___cast('ProtocolMessage.Type', 21)
        REGISTER_FOR_GAME_CONTROLLER_EVENTS_MESSAGE = typing___cast('ProtocolMessage.Type', 22)
        KEYBOARD_MESSAGE = typing___cast('ProtocolMessage.Type', 23)
        GET_KEYBOARD_SESSION_MESSAGE = typing___cast('ProtocolMessage.Type', 24)
        TEXT_INPUT_MESSAGE = typing___cast('ProtocolMessage.Type', 25)
        GET_VOICE_INPUT_DEVICES_MESSAGE = typing___cast('ProtocolMessage.Type', 26)
        GET_VOICE_INPUT_DEVICES_RESPONSE_MESSAGE = typing___cast('ProtocolMessage.Type', 27)
        REGISTER_VOICE_INPUT_DEVICE_MESSAGE = typing___cast('ProtocolMessage.Type', 28)
        REGISTER_VOICE_INPUT_DEVICE_RESPONSE_MESSAGE = typing___cast('ProtocolMessage.Type', 29)
        SET_RECORDING_STATE_MESSAGE = typing___cast('ProtocolMessage.Type', 30)
        SEND_VOICE_INPUT_MESSAGE = typing___cast('ProtocolMessage.Type', 31)
        PLAYBACK_QUEUE_REQUEST_MESSAGE = typing___cast('ProtocolMessage.Type', 32)
        TRANSACTION_MESSAGE = typing___cast('ProtocolMessage.Type', 33)
        CRYPTO_PAIRING_MESSAGE = typing___cast('ProtocolMessage.Type', 34)
        GAME_CONTROLLER_PROPERTIES_MESSAGE = typing___cast('ProtocolMessage.Type', 35)
        SET_READY_STATE_MESSAGE = typing___cast('ProtocolMessage.Type', 36)
        DEVICE_INFO_UPDATE_MESSAGE = typing___cast('ProtocolMessage.Type', 37)
        SET_CONNECTION_STATE_MESSAGE = typing___cast('ProtocolMessage.Type', 38)
        SEND_BUTTON_EVENT = typing___cast('ProtocolMessage.Type', 39)
        SET_HILITE_MODE_MESSAGE = typing___cast('ProtocolMessage.Type', 40)
        WAKE_DEVICE_MESSAGE = typing___cast('ProtocolMessage.Type', 41)
        GENERIC_MESSAGE = typing___cast('ProtocolMessage.Type', 42)
        SEND_PACKED_VIRTUAL_TOUCH_EVENT_MESSAGE = typing___cast('ProtocolMessage.Type', 43)
        SEND_LYRICS_EVENT = typing___cast('ProtocolMessage.Type', 44)
        SET_NOW_PLAYING_CLIENT_MESSAGE = typing___cast('ProtocolMessage.Type', 46)
        SET_NOT_PLAYING_PLAYER_MESSAGE = typing___cast('ProtocolMessage.Type', 47)
        REMOVE_CLIENT_MESSAGE = typing___cast('ProtocolMessage.Type', 53)
        REMOVE_PLAYER_MESSAGE = typing___cast('ProtocolMessage.Type', 54)
        UPDATE_CLIENT_MESSAGE = typing___cast('ProtocolMessage.Type', 55)
        UPDATE_CONTENT_ITEM_MESSAGE = typing___cast('ProtocolMessage.Type', 56)
        VOLUME_CONTROL_CAPABILITIES_DID_CHANGE_MESSAGE = typing___cast('ProtocolMessage.Type', 64)
        UPDATE_OUTPUT_DEVICE_MESSAGE = typing___cast('ProtocolMessage.Type', 65)
        SET_DEFAULT_SUPPORTED_COMMANDS_MESSAGE = typing___cast('ProtocolMessage.Type', 72)
    UNKNOWN_MESSAGE = typing___cast('ProtocolMessage.Type', 0)
    SEND_COMMAND_MESSAGE = typing___cast('ProtocolMessage.Type', 1)
    SEND_COMMAND_RESULT_MESSAGE = typing___cast('ProtocolMessage.Type', 2)
    GET_STATE_MESSAGE = typing___cast('ProtocolMessage.Type', 3)
    SET_STATE_MESSAGE = typing___cast('ProtocolMessage.Type', 4)
    SET_ARTWORK_MESSAGE = typing___cast('ProtocolMessage.Type', 5)
    REGISTER_HID_DEVICE_MESSAGE = typing___cast('ProtocolMessage.Type', 6)
    REGISTER_HID_DEVICE_RESULT_MESSAGE = typing___cast('ProtocolMessage.Type', 7)
    SEND_HID_EVENT_MESSAGE = typing___cast('ProtocolMessage.Type', 8)
    SEND_HID_REPORT_MESSAGE = typing___cast('ProtocolMessage.Type', 9)
    SEND_VIRTUAL_TOUCH_EVENT_MESSAGE = typing___cast('ProtocolMessage.Type', 10)
    NOTIFICATION_MESSAGE = typing___cast('ProtocolMessage.Type', 11)
    CONTENT_ITEMS_CHANGED_NOTIFICATION_MESSAGE = typing___cast('ProtocolMessage.Type', 12)
    DEVICE_INFO_MESSAGE = typing___cast('ProtocolMessage.Type', 15)
    CLIENT_UPDATES_CONFIG_MESSAGE = typing___cast('ProtocolMessage.Type', 16)
    VOLUME_CONTROL_AVAILABILITY_MESSAGE = typing___cast('ProtocolMessage.Type', 17)
    GAME_CONTROLLER_MESSAGE = typing___cast('ProtocolMessage.Type', 18)
    REGISTER_GAME_CONTROLLER_MESSAGE = typing___cast('ProtocolMessage.Type', 19)
    REGISTER_GAME_CONTROLLER_RESPONSE_MESSAGE = typing___cast('ProtocolMessage.Type', 20)
    UNREGISTER_GAME_CONTROLLER_MESSAGE = typing___cast('ProtocolMessage.Type', 21)
    REGISTER_FOR_GAME_CONTROLLER_EVENTS_MESSAGE = typing___cast('ProtocolMessage.Type', 22)
    KEYBOARD_MESSAGE = typing___cast('ProtocolMessage.Type', 23)
    GET_KEYBOARD_SESSION_MESSAGE = typing___cast('ProtocolMessage.Type', 24)
    TEXT_INPUT_MESSAGE = typing___cast('ProtocolMessage.Type', 25)
    GET_VOICE_INPUT_DEVICES_MESSAGE = typing___cast('ProtocolMessage.Type', 26)
    GET_VOICE_INPUT_DEVICES_RESPONSE_MESSAGE = typing___cast('ProtocolMessage.Type', 27)
    REGISTER_VOICE_INPUT_DEVICE_MESSAGE = typing___cast('ProtocolMessage.Type', 28)
    REGISTER_VOICE_INPUT_DEVICE_RESPONSE_MESSAGE = typing___cast('ProtocolMessage.Type', 29)
    SET_RECORDING_STATE_MESSAGE = typing___cast('ProtocolMessage.Type', 30)
    SEND_VOICE_INPUT_MESSAGE = typing___cast('ProtocolMessage.Type', 31)
    PLAYBACK_QUEUE_REQUEST_MESSAGE = typing___cast('ProtocolMessage.Type', 32)
    TRANSACTION_MESSAGE = typing___cast('ProtocolMessage.Type', 33)
    CRYPTO_PAIRING_MESSAGE = typing___cast('ProtocolMessage.Type', 34)
    GAME_CONTROLLER_PROPERTIES_MESSAGE = typing___cast('ProtocolMessage.Type', 35)
    SET_READY_STATE_MESSAGE = typing___cast('ProtocolMessage.Type', 36)
    DEVICE_INFO_UPDATE_MESSAGE = typing___cast('ProtocolMessage.Type', 37)
    SET_CONNECTION_STATE_MESSAGE = typing___cast('ProtocolMessage.Type', 38)
    SEND_BUTTON_EVENT = typing___cast('ProtocolMessage.Type', 39)
    SET_HILITE_MODE_MESSAGE = typing___cast('ProtocolMessage.Type', 40)
    WAKE_DEVICE_MESSAGE = typing___cast('ProtocolMessage.Type', 41)
    GENERIC_MESSAGE = typing___cast('ProtocolMessage.Type', 42)
    SEND_PACKED_VIRTUAL_TOUCH_EVENT_MESSAGE = typing___cast('ProtocolMessage.Type', 43)
    SEND_LYRICS_EVENT = typing___cast('ProtocolMessage.Type', 44)
    SET_NOW_PLAYING_CLIENT_MESSAGE = typing___cast('ProtocolMessage.Type', 46)
    SET_NOT_PLAYING_PLAYER_MESSAGE = typing___cast('ProtocolMessage.Type', 47)
    REMOVE_CLIENT_MESSAGE = typing___cast('ProtocolMessage.Type', 53)
    REMOVE_PLAYER_MESSAGE = typing___cast('ProtocolMessage.Type', 54)
    UPDATE_CLIENT_MESSAGE = typing___cast('ProtocolMessage.Type', 55)
    UPDATE_CONTENT_ITEM_MESSAGE = typing___cast('ProtocolMessage.Type', 56)
    VOLUME_CONTROL_CAPABILITIES_DID_CHANGE_MESSAGE = typing___cast('ProtocolMessage.Type', 64)
    UPDATE_OUTPUT_DEVICE_MESSAGE = typing___cast('ProtocolMessage.Type', 65)
    SET_DEFAULT_SUPPORTED_COMMANDS_MESSAGE = typing___cast('ProtocolMessage.Type', 72)
    global___Type = Type

    type = ... # type: global___ProtocolMessage.Type
    identifier = ... # type: typing___Text
    authenticationToken = ... # type: typing___Text
    errorCode = ... # type: global___ProtocolMessage.ErrorCode
    timestamp = ... # type: builtin___int

    def __init__(self,
        *,
        type : typing___Optional[global___ProtocolMessage.Type] = None,
        identifier : typing___Optional[typing___Text] = None,
        authenticationToken : typing___Optional[typing___Text] = None,
        errorCode : typing___Optional[global___ProtocolMessage.ErrorCode] = None,
        timestamp : typing___Optional[builtin___int] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> ProtocolMessage: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> ProtocolMessage: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"authenticationToken",b"authenticationToken",u"errorCode",b"errorCode",u"identifier",b"identifier",u"timestamp",b"timestamp",u"type",b"type"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"authenticationToken",b"authenticationToken",u"errorCode",b"errorCode",u"identifier",b"identifier",u"timestamp",b"timestamp",u"type",b"type"]) -> None: ...
global___ProtocolMessage = ProtocolMessage
