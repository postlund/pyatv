# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    List as typing___List,
    Optional as typing___Optional,
    Text as typing___Text,
    Tuple as typing___Tuple,
    Union as typing___Union,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int
builtin___str = str
if sys.version_info < (3,):
    builtin___buffer = buffer
    builtin___unicode = unicode


class ProtocolMessage(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class Type(builtin___int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: builtin___int) -> builtin___str: ...
        @classmethod
        def Value(cls, name: builtin___str) -> 'ProtocolMessage.Type': ...
        @classmethod
        def keys(cls) -> typing___List[builtin___str]: ...
        @classmethod
        def values(cls) -> typing___List['ProtocolMessage.Type']: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[builtin___str, 'ProtocolMessage.Type']]: ...
        UNKNOWN_MESSAGE = typing___cast('ProtocolMessage.Type', 0)
        SEND_COMMAND_MESSAGE = typing___cast('ProtocolMessage.Type', 1)
        SEND_COMMAND_RESULT_MESSAGE = typing___cast('ProtocolMessage.Type', 2)
        GET_STATE_MESSAGE = typing___cast('ProtocolMessage.Type', 3)
        SET_STATE_MESSAGE = typing___cast('ProtocolMessage.Type', 4)
        SET_ARTWORK_MESSAGE = typing___cast('ProtocolMessage.Type', 5)
        REGISTER_HID_DEVICE_MESSAGE = typing___cast('ProtocolMessage.Type', 6)
        REGISTER_HID_DEVICE_RESULT_MESSAGE = typing___cast('ProtocolMessage.Type', 7)
        SEND_HID_EVENT_MESSAGE = typing___cast('ProtocolMessage.Type', 8)
        SEND_HID_REPORT_MESSAGE = typing___cast('ProtocolMessage.Type', 9)
        SEND_VIRTUAL_TOUCH_EVENT_MESSAGE = typing___cast('ProtocolMessage.Type', 10)
        NOTIFICATION_MESSAGE = typing___cast('ProtocolMessage.Type', 11)
        CONTENT_ITEMS_CHANGED_NOTIFICATION_MESSAGE = typing___cast('ProtocolMessage.Type', 12)
        DEVICE_INFO_MESSAGE = typing___cast('ProtocolMessage.Type', 15)
        CLIENT_UPDATES_CONFIG_MESSAGE = typing___cast('ProtocolMessage.Type', 16)
        VOLUME_CONTROL_AVAILABILITY_MESSAGE = typing___cast('ProtocolMessage.Type', 17)
        GAME_CONTROLLER_MESSAGE = typing___cast('ProtocolMessage.Type', 18)
        REGISTER_GAME_CONTROLLER_MESSAGE = typing___cast('ProtocolMessage.Type', 19)
        REGISTER_GAME_CONTROLLER_RESPONSE_MESSAGE = typing___cast('ProtocolMessage.Type', 20)
        UNREGISTER_GAME_CONTROLLER_MESSAGE = typing___cast('ProtocolMessage.Type', 21)
        REGISTER_FOR_GAME_CONTROLLER_EVENTS_MESSAGE = typing___cast('ProtocolMessage.Type', 22)
        KEYBOARD_MESSAGE = typing___cast('ProtocolMessage.Type', 23)
        GET_KEYBOARD_SESSION_MESSAGE = typing___cast('ProtocolMessage.Type', 24)
        TEXT_INPUT_MESSAGE = typing___cast('ProtocolMessage.Type', 25)
        GET_VOICE_INPUT_DEVICES_MESSAGE = typing___cast('ProtocolMessage.Type', 26)
        GET_VOICE_INPUT_DEVICES_RESPONSE_MESSAGE = typing___cast('ProtocolMessage.Type', 27)
        REGISTER_VOICE_INPUT_DEVICE_MESSAGE = typing___cast('ProtocolMessage.Type', 28)
        REGISTER_VOICE_INPUT_DEVICE_RESPONSE_MESSAGE = typing___cast('ProtocolMessage.Type', 29)
        SET_RECORDING_STATE_MESSAGE = typing___cast('ProtocolMessage.Type', 30)
        SEND_VOICE_INPUT_MESSAGE = typing___cast('ProtocolMessage.Type', 31)
        PLAYBACK_QUEUE_REQUEST_MESSAGE = typing___cast('ProtocolMessage.Type', 32)
        TRANSACTION_MESSAGE = typing___cast('ProtocolMessage.Type', 33)
        CRYPTO_PAIRING_MESSAGE = typing___cast('ProtocolMessage.Type', 34)
        GAME_CONTROLLER_PROPERTIES_MESSAGE = typing___cast('ProtocolMessage.Type', 35)
        SET_READY_STATE_MESSAGE = typing___cast('ProtocolMessage.Type', 36)
        DEVICE_INFO_UPDATE_MESSAGE = typing___cast('ProtocolMessage.Type', 37)
        SET_CONNECTION_STATE_MESSAGE = typing___cast('ProtocolMessage.Type', 38)
        SEND_BUTTON_EVENT = typing___cast('ProtocolMessage.Type', 39)
        SET_HILITE_MODE_MESSAGE = typing___cast('ProtocolMessage.Type', 40)
        WAKE_DEVICE_MESSAGE = typing___cast('ProtocolMessage.Type', 41)
        GENERIC_MESSAGE = typing___cast('ProtocolMessage.Type', 42)
        SEND_PACKED_VIRTUAL_TOUCH_EVENT_MESSAGE = typing___cast('ProtocolMessage.Type', 43)
        SEND_LYRICS_EVENT = typing___cast('ProtocolMessage.Type', 44)
        SET_NOW_PLAYING_CLIENT_MESSAGE = typing___cast('ProtocolMessage.Type', 46)
        UPDATE_CLIENT_MESSAGE = typing___cast('ProtocolMessage.Type', 55)
        UPDATE_CONTENT_ITEM_MESSAGE = typing___cast('ProtocolMessage.Type', 56)
        SET_DEFAULT_SUPPORTED_COMMANDS_MESSAGE = typing___cast('ProtocolMessage.Type', 72)
    UNKNOWN_MESSAGE = typing___cast('ProtocolMessage.Type', 0)
    SEND_COMMAND_MESSAGE = typing___cast('ProtocolMessage.Type', 1)
    SEND_COMMAND_RESULT_MESSAGE = typing___cast('ProtocolMessage.Type', 2)
    GET_STATE_MESSAGE = typing___cast('ProtocolMessage.Type', 3)
    SET_STATE_MESSAGE = typing___cast('ProtocolMessage.Type', 4)
    SET_ARTWORK_MESSAGE = typing___cast('ProtocolMessage.Type', 5)
    REGISTER_HID_DEVICE_MESSAGE = typing___cast('ProtocolMessage.Type', 6)
    REGISTER_HID_DEVICE_RESULT_MESSAGE = typing___cast('ProtocolMessage.Type', 7)
    SEND_HID_EVENT_MESSAGE = typing___cast('ProtocolMessage.Type', 8)
    SEND_HID_REPORT_MESSAGE = typing___cast('ProtocolMessage.Type', 9)
    SEND_VIRTUAL_TOUCH_EVENT_MESSAGE = typing___cast('ProtocolMessage.Type', 10)
    NOTIFICATION_MESSAGE = typing___cast('ProtocolMessage.Type', 11)
    CONTENT_ITEMS_CHANGED_NOTIFICATION_MESSAGE = typing___cast('ProtocolMessage.Type', 12)
    DEVICE_INFO_MESSAGE = typing___cast('ProtocolMessage.Type', 15)
    CLIENT_UPDATES_CONFIG_MESSAGE = typing___cast('ProtocolMessage.Type', 16)
    VOLUME_CONTROL_AVAILABILITY_MESSAGE = typing___cast('ProtocolMessage.Type', 17)
    GAME_CONTROLLER_MESSAGE = typing___cast('ProtocolMessage.Type', 18)
    REGISTER_GAME_CONTROLLER_MESSAGE = typing___cast('ProtocolMessage.Type', 19)
    REGISTER_GAME_CONTROLLER_RESPONSE_MESSAGE = typing___cast('ProtocolMessage.Type', 20)
    UNREGISTER_GAME_CONTROLLER_MESSAGE = typing___cast('ProtocolMessage.Type', 21)
    REGISTER_FOR_GAME_CONTROLLER_EVENTS_MESSAGE = typing___cast('ProtocolMessage.Type', 22)
    KEYBOARD_MESSAGE = typing___cast('ProtocolMessage.Type', 23)
    GET_KEYBOARD_SESSION_MESSAGE = typing___cast('ProtocolMessage.Type', 24)
    TEXT_INPUT_MESSAGE = typing___cast('ProtocolMessage.Type', 25)
    GET_VOICE_INPUT_DEVICES_MESSAGE = typing___cast('ProtocolMessage.Type', 26)
    GET_VOICE_INPUT_DEVICES_RESPONSE_MESSAGE = typing___cast('ProtocolMessage.Type', 27)
    REGISTER_VOICE_INPUT_DEVICE_MESSAGE = typing___cast('ProtocolMessage.Type', 28)
    REGISTER_VOICE_INPUT_DEVICE_RESPONSE_MESSAGE = typing___cast('ProtocolMessage.Type', 29)
    SET_RECORDING_STATE_MESSAGE = typing___cast('ProtocolMessage.Type', 30)
    SEND_VOICE_INPUT_MESSAGE = typing___cast('ProtocolMessage.Type', 31)
    PLAYBACK_QUEUE_REQUEST_MESSAGE = typing___cast('ProtocolMessage.Type', 32)
    TRANSACTION_MESSAGE = typing___cast('ProtocolMessage.Type', 33)
    CRYPTO_PAIRING_MESSAGE = typing___cast('ProtocolMessage.Type', 34)
    GAME_CONTROLLER_PROPERTIES_MESSAGE = typing___cast('ProtocolMessage.Type', 35)
    SET_READY_STATE_MESSAGE = typing___cast('ProtocolMessage.Type', 36)
    DEVICE_INFO_UPDATE_MESSAGE = typing___cast('ProtocolMessage.Type', 37)
    SET_CONNECTION_STATE_MESSAGE = typing___cast('ProtocolMessage.Type', 38)
    SEND_BUTTON_EVENT = typing___cast('ProtocolMessage.Type', 39)
    SET_HILITE_MODE_MESSAGE = typing___cast('ProtocolMessage.Type', 40)
    WAKE_DEVICE_MESSAGE = typing___cast('ProtocolMessage.Type', 41)
    GENERIC_MESSAGE = typing___cast('ProtocolMessage.Type', 42)
    SEND_PACKED_VIRTUAL_TOUCH_EVENT_MESSAGE = typing___cast('ProtocolMessage.Type', 43)
    SEND_LYRICS_EVENT = typing___cast('ProtocolMessage.Type', 44)
    SET_NOW_PLAYING_CLIENT_MESSAGE = typing___cast('ProtocolMessage.Type', 46)
    UPDATE_CLIENT_MESSAGE = typing___cast('ProtocolMessage.Type', 55)
    UPDATE_CONTENT_ITEM_MESSAGE = typing___cast('ProtocolMessage.Type', 56)
    SET_DEFAULT_SUPPORTED_COMMANDS_MESSAGE = typing___cast('ProtocolMessage.Type', 72)

    type = ... # type: ProtocolMessage.Type
    identifier = ... # type: typing___Text
    authenticationToken = ... # type: typing___Text
    errorCode = ... # type: builtin___int
    timestamp = ... # type: builtin___int

    def __init__(self,
        *,
        type : typing___Optional[ProtocolMessage.Type] = None,
        identifier : typing___Optional[typing___Text] = None,
        authenticationToken : typing___Optional[typing___Text] = None,
        errorCode : typing___Optional[builtin___int] = None,
        timestamp : typing___Optional[builtin___int] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> ProtocolMessage: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> ProtocolMessage: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"authenticationToken",b"authenticationToken",u"errorCode",b"errorCode",u"identifier",b"identifier",u"timestamp",b"timestamp",u"type",b"type"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"authenticationToken",b"authenticationToken",u"errorCode",b"errorCode",u"identifier",b"identifier",u"timestamp",b"timestamp",u"type",b"type"]) -> None: ...
