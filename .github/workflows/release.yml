name: Publish containers and make release

on:
  create:
    tags:
      - '*'
  push:
    branches: ['master', 'test_release_branch']
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  PYTHON_VERSION: 3.9

jobs:
  docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Build wheel
        id: wheel
        run: |
          # If not a release branch, add SHA1 to patch version
          if [ ! "$(python scripts/version.py is_release)" = "false" ]; then
            python scripts/version.py sha1
          fi

          python -m pip install --upgrade setuptools pip wheel
          python setup.py bdist_wheel
          echo "::set-output name=version::$(python scripts/version.py get)"

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          github-token: ${{ secrets.GITHUB_TOKEN }}
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.wheel.outputs.version }}

  make_release:
    if: github.event_name == "create" && github.event.ref_type == "tag"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Extract release notes and name
        id: info
        shell: python {0}
        run: |
          import re

          name = None
          version = None
          notes = ""
          with open("CHANGES.md", "r", encoding="utf-8") as handle:
            for line in handle:
              if line.startswith("##"):
                if name is None:
                  version, name = re.match(r"## ([0-9.]+) ([^(]+) \(.*", line).groups()
                else:
                  break
              if name is not None:
                notes += line

          print("::set-output name=name::" + name)
          print("::set-output name=version::" + version)

          with open("notes.md", "w", encoding="utf-8") as handle:
            handle.write(notes)

      - name: Publish release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/pyatv-${{ steps.info.outputs.version }}.tar.gz,dist/pyatv-${{ steps.info.outputs.version }}-*.whl"
          bodyFile: "notes.md"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          tag: v${{ steps.info.outputs.version }}
          name: ${{ steps.info.outputs.name }}
