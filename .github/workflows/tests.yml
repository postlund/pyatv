name: Tests

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: >-
      ${{ matrix.python-version }}
      /
      ${{ matrix.platform }}
      /
      (regression: ${{ matrix.regression }})
    runs-on: ${{ matrix.platform }}
    env:
      CACHE_INVALIDATE: "v4"
      CACHE_KEY: ${{ github.run_id }}-${{ github.job }}-${{ matrix.python-version }}-${{ matrix.platform }}-${{ matrix.regression }}
    strategy:
      matrix:
        # https://help.github.com/articles/virtual-environments-for-github-actions
        platform:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
        chickn-args:
          - "--no-venv"
        regression:
          - false
        include:
          - platform: ubuntu-latest
            python-version: 3.8
            chickn-args: "--no-venv -v requirements_file=base_versions.txt"
            regression: true
    steps:
    # Receipe for not running jobs again when re-running workflow
    # https://medium.com/xcnotes/how-to-re-run-only-failed-jobs-on-github-actions-b79b13d1ceb2
    - id: timestamp
      shell: bash
      run: echo "::set-output name=timestamp::$(timestamp +%s)"
    - name: Restore the previous run result
      uses: actions/cache@v2
      with:
        path: |
          run_result
        key: ${{ env.CACHE_KEY }}-${{ steps.timestamp.outputs.timestamp }}
        restore-keys: |
          ${{ env.CACHE_KEY }}-
    - id: run_result
      shell: bash
      run: cat run_result 2>/dev/null || echo 'default'

    # Regular flow continues here
    - uses: actions/checkout@v2
      if: steps.run_result.outputs.run_result != 'success'
      with:
        fetch-depth: 2
    - name: Set up Python ${{ matrix.python-version }}
      if: steps.run_result.outputs.run_result != 'success'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - uses: syphar/restore-virtualenv@v1
      if: steps.run_result.outputs.run_result != 'success'
      id: cache-virtualenv
      with:
        custom_cache_key_element: ${{ env.CACHE_INVALIDATE }}
        requirement_files: |
          **/*.txt
          **/requirements/**.txt

    - uses: syphar/restore-pip-download-cache@v1
      if: steps.run_result.outputs.run_result != 'success' && steps.cache-virtualenv.outputs.cache-hit != 'true'

    - name: Install dependencies
      if: steps.run_result.outputs.run_result != 'success'
      run: |
        python -m pip install --upgrade setuptools pip pyyaml
    - name: Test with chickn
      if: steps.run_result.outputs.run_result != 'success'
      run: python ./scripts/chickn.py -t miniaudio -t ${{ matrix.python-version }} ${{ matrix.chickn-args }}
      shell: bash
    - name: Upload coverage to Codecov
      if: steps.run_result.outputs.run_result != 'success'
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        name: pyatv
        fail_ci_if_error: false

    - name: Mark build as successful
      if: steps.run_result.outputs.run_result != 'success'
      run: echo "::set-output name=run_result::success" > run_result
